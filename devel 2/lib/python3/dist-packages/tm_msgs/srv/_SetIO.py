# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tm_msgs/SetIORequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetIORequest(genpy.Message):
  _md5sum = "f68a6af36df29cd75eb72b95a963915a"
  _type = "tm_msgs/SetIORequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# More details please refer to the TM_Robot_Expression.pdf(1.76 rev1.00) Chapter 6.5 IO
int8 MODULE_CONTROLBOX = 0
int8 MODULE_ENDEFFECTOR = 1

int8 TYPE_DIGITAL_IN = 0
int8 TYPE_DIGITAL_OUT = 1
int8 TYPE_INSTANT_DO = 2
int8 TYPE_ANALOG_IN = 3
int8 TYPE_ANALOG_OUT = 4
int8 TYPE_INSTANT_AO = 5

int8 STATE_OFF = 0
int8 STATE_ON = 1

# request fields
int8 module
int8 type
int8 pin
float32 state #STATE_OFF or STATE_ON value, or other value (if type expressed in a specific control module)
"""
  # Pseudo-constants
  MODULE_CONTROLBOX = 0
  MODULE_ENDEFFECTOR = 1
  TYPE_DIGITAL_IN = 0
  TYPE_DIGITAL_OUT = 1
  TYPE_INSTANT_DO = 2
  TYPE_ANALOG_IN = 3
  TYPE_ANALOG_OUT = 4
  TYPE_INSTANT_AO = 5
  STATE_OFF = 0
  STATE_ON = 1

  __slots__ = ['module','type','pin','state']
  _slot_types = ['int8','int8','int8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       module,type,pin,state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetIORequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.module is None:
        self.module = 0
      if self.type is None:
        self.type = 0
      if self.pin is None:
        self.pin = 0
      if self.state is None:
        self.state = 0.
    else:
      self.module = 0
      self.type = 0
      self.pin = 0
      self.state = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3bf().pack(_x.module, _x.type, _x.pin, _x.state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.module, _x.type, _x.pin, _x.state,) = _get_struct_3bf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3bf().pack(_x.module, _x.type, _x.pin, _x.state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.module, _x.type, _x.pin, _x.state,) = _get_struct_3bf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3bf = None
def _get_struct_3bf():
    global _struct_3bf
    if _struct_3bf is None:
        _struct_3bf = struct.Struct("<3bf")
    return _struct_3bf
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tm_msgs/SetIOResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetIOResponse(genpy.Message):
  _md5sum = "6f6da3883749771fac40d6deb24a8c02"
  _type = "tm_msgs/SetIOResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#ok= set function status
bool ok

"""
  __slots__ = ['ok']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ok

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetIOResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ok is None:
        self.ok = False
    else:
      self.ok = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.ok
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.ok,) = _get_struct_B().unpack(str[start:end])
      self.ok = bool(self.ok)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.ok
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.ok,) = _get_struct_B().unpack(str[start:end])
      self.ok = bool(self.ok)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class SetIO(object):
  _type          = 'tm_msgs/SetIO'
  _md5sum = 'ee6cbf90dc535c1e6656dd67997a2cd6'
  _request_class  = SetIORequest
  _response_class = SetIOResponse
