// Generated by gencpp from file tm_msgs/AskStaResponse.msg
// DO NOT EDIT!


#ifndef TM_MSGS_MESSAGE_ASKSTARESPONSE_H
#define TM_MSGS_MESSAGE_ASKSTARESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tm_msgs
{
template <class ContainerAllocator>
struct AskStaResponse_
{
  typedef AskStaResponse_<ContainerAllocator> Type;

  AskStaResponse_()
    : ok(false)
    , subcmd()
    , subdata()  {
    }
  AskStaResponse_(const ContainerAllocator& _alloc)
    : ok(false)
    , subcmd(_alloc)
    , subdata(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _ok_type;
  _ok_type ok;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _subcmd_type;
  _subcmd_type subcmd;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _subdata_type;
  _subdata_type subdata;





  typedef boost::shared_ptr< ::tm_msgs::AskStaResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tm_msgs::AskStaResponse_<ContainerAllocator> const> ConstPtr;

}; // struct AskStaResponse_

typedef ::tm_msgs::AskStaResponse_<std::allocator<void> > AskStaResponse;

typedef boost::shared_ptr< ::tm_msgs::AskStaResponse > AskStaResponsePtr;
typedef boost::shared_ptr< ::tm_msgs::AskStaResponse const> AskStaResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tm_msgs::AskStaResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tm_msgs::AskStaResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tm_msgs::AskStaResponse_<ContainerAllocator1> & lhs, const ::tm_msgs::AskStaResponse_<ContainerAllocator2> & rhs)
{
  return lhs.ok == rhs.ok &&
    lhs.subcmd == rhs.subcmd &&
    lhs.subdata == rhs.subdata;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tm_msgs::AskStaResponse_<ContainerAllocator1> & lhs, const ::tm_msgs::AskStaResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::AskStaResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::AskStaResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::AskStaResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::AskStaResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::AskStaResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::AskStaResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tm_msgs::AskStaResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "25873f3325181d973b805ca6d8ce5c70";
  }

  static const char* value(const ::tm_msgs::AskStaResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x25873f3325181d97ULL;
  static const uint64_t static_value2 = 0x3b805ca6d8ce5c70ULL;
};

template<class ContainerAllocator>
struct DataType< ::tm_msgs::AskStaResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tm_msgs/AskStaResponse";
  }

  static const char* value(const ::tm_msgs::AskStaResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tm_msgs::AskStaResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ok        : read status \n"
"bool ok\n"
"\n"
"string subcmd\n"
"string subdata\n"
;
  }

  static const char* value(const ::tm_msgs::AskStaResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tm_msgs::AskStaResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ok);
      stream.next(m.subcmd);
      stream.next(m.subdata);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AskStaResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tm_msgs::AskStaResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tm_msgs::AskStaResponse_<ContainerAllocator>& v)
  {
    s << indent << "ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ok);
    s << indent << "subcmd: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.subcmd);
    s << indent << "subdata: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.subdata);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TM_MSGS_MESSAGE_ASKSTARESPONSE_H
