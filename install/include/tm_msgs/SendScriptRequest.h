// Generated by gencpp from file tm_msgs/SendScriptRequest.msg
// DO NOT EDIT!


#ifndef TM_MSGS_MESSAGE_SENDSCRIPTREQUEST_H
#define TM_MSGS_MESSAGE_SENDSCRIPTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tm_msgs
{
template <class ContainerAllocator>
struct SendScriptRequest_
{
  typedef SendScriptRequest_<ContainerAllocator> Type;

  SendScriptRequest_()
    : id()
    , script()  {
    }
  SendScriptRequest_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , script(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _script_type;
  _script_type script;





  typedef boost::shared_ptr< ::tm_msgs::SendScriptRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tm_msgs::SendScriptRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SendScriptRequest_

typedef ::tm_msgs::SendScriptRequest_<std::allocator<void> > SendScriptRequest;

typedef boost::shared_ptr< ::tm_msgs::SendScriptRequest > SendScriptRequestPtr;
typedef boost::shared_ptr< ::tm_msgs::SendScriptRequest const> SendScriptRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tm_msgs::SendScriptRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tm_msgs::SendScriptRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tm_msgs::SendScriptRequest_<ContainerAllocator1> & lhs, const ::tm_msgs::SendScriptRequest_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.script == rhs.script;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tm_msgs::SendScriptRequest_<ContainerAllocator1> & lhs, const ::tm_msgs::SendScriptRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::SendScriptRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::SendScriptRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::SendScriptRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::SendScriptRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::SendScriptRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::SendScriptRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tm_msgs::SendScriptRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5dd928d0ec2b0559a4b55f04df74eb17";
  }

  static const char* value(const ::tm_msgs::SendScriptRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5dd928d0ec2b0559ULL;
  static const uint64_t static_value2 = 0xa4b55f04df74eb17ULL;
};

template<class ContainerAllocator>
struct DataType< ::tm_msgs::SendScriptRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tm_msgs/SendScriptRequest";
  }

  static const char* value(const ::tm_msgs::SendScriptRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tm_msgs::SendScriptRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# request fields\n"
"# More details please refer to the TM_Robot_Expression.pdf(1.76 rev1.00) Chapter 7.4 TMSCT\n"
"\n"
"string id\n"
"string script\n"
;
  }

  static const char* value(const ::tm_msgs::SendScriptRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tm_msgs::SendScriptRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.script);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SendScriptRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tm_msgs::SendScriptRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tm_msgs::SendScriptRequest_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "script: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.script);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TM_MSGS_MESSAGE_SENDSCRIPTREQUEST_H
