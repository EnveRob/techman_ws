// Generated by gencpp from file tm_msgs/AskItemResponse.msg
// DO NOT EDIT!


#ifndef TM_MSGS_MESSAGE_ASKITEMRESPONSE_H
#define TM_MSGS_MESSAGE_ASKITEMRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tm_msgs
{
template <class ContainerAllocator>
struct AskItemResponse_
{
  typedef AskItemResponse_<ContainerAllocator> Type;

  AskItemResponse_()
    : ok(false)
    , id()
    , value()  {
    }
  AskItemResponse_(const ContainerAllocator& _alloc)
    : ok(false)
    , id(_alloc)
    , value(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _ok_type;
  _ok_type ok;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::tm_msgs::AskItemResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tm_msgs::AskItemResponse_<ContainerAllocator> const> ConstPtr;

}; // struct AskItemResponse_

typedef ::tm_msgs::AskItemResponse_<std::allocator<void> > AskItemResponse;

typedef boost::shared_ptr< ::tm_msgs::AskItemResponse > AskItemResponsePtr;
typedef boost::shared_ptr< ::tm_msgs::AskItemResponse const> AskItemResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tm_msgs::AskItemResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tm_msgs::AskItemResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tm_msgs::AskItemResponse_<ContainerAllocator1> & lhs, const ::tm_msgs::AskItemResponse_<ContainerAllocator2> & rhs)
{
  return lhs.ok == rhs.ok &&
    lhs.id == rhs.id &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tm_msgs::AskItemResponse_<ContainerAllocator1> & lhs, const ::tm_msgs::AskItemResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::AskItemResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::AskItemResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::AskItemResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::AskItemResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::AskItemResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::AskItemResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tm_msgs::AskItemResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "79f96d7d925273cc7a9e664679391312";
  }

  static const char* value(const ::tm_msgs::AskItemResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x79f96d7d925273ccULL;
  static const uint64_t static_value2 = 0x7a9e664679391312ULL;
};

template<class ContainerAllocator>
struct DataType< ::tm_msgs::AskItemResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tm_msgs/AskItemResponse";
  }

  static const char* value(const ::tm_msgs::AskItemResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tm_msgs::AskItemResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ok        : read status \n"
"bool ok\n"
"\n"
"# id        : The discribtion you want to name.\n"
"# value     : The value of asked item.\n"
"string id\n"
"string value\n"
"\n"
;
  }

  static const char* value(const ::tm_msgs::AskItemResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tm_msgs::AskItemResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ok);
      stream.next(m.id);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AskItemResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tm_msgs::AskItemResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tm_msgs::AskItemResponse_<ContainerAllocator>& v)
  {
    s << indent << "ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ok);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "value: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TM_MSGS_MESSAGE_ASKITEMRESPONSE_H
