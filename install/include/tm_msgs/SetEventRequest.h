// Generated by gencpp from file tm_msgs/SetEventRequest.msg
// DO NOT EDIT!


#ifndef TM_MSGS_MESSAGE_SETEVENTREQUEST_H
#define TM_MSGS_MESSAGE_SETEVENTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tm_msgs
{
template <class ContainerAllocator>
struct SetEventRequest_
{
  typedef SetEventRequest_<ContainerAllocator> Type;

  SetEventRequest_()
    : func(0)
    , arg0(0)
    , arg1(0)  {
    }
  SetEventRequest_(const ContainerAllocator& _alloc)
    : func(0)
    , arg0(0)
    , arg1(0)  {
  (void)_alloc;
    }



   typedef int8_t _func_type;
  _func_type func;

   typedef int8_t _arg0_type;
  _arg0_type arg0;

   typedef int8_t _arg1_type;
  _arg1_type arg1;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TAG)
  #undef TAG
#endif
#if defined(_WIN32) && defined(WAIT_TAG)
  #undef WAIT_TAG
#endif
#if defined(_WIN32) && defined(STOP)
  #undef STOP
#endif
#if defined(_WIN32) && defined(PAUSE)
  #undef PAUSE
#endif
#if defined(_WIN32) && defined(RESUME)
  #undef RESUME
#endif
#if defined(_WIN32) && defined(EXIT)
  #undef EXIT
#endif

  enum {
    TAG = 1,
    WAIT_TAG = 2,
    STOP = 11,
    PAUSE = 12,
    RESUME = 13,
    EXIT = -1,
  };


  typedef boost::shared_ptr< ::tm_msgs::SetEventRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tm_msgs::SetEventRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetEventRequest_

typedef ::tm_msgs::SetEventRequest_<std::allocator<void> > SetEventRequest;

typedef boost::shared_ptr< ::tm_msgs::SetEventRequest > SetEventRequestPtr;
typedef boost::shared_ptr< ::tm_msgs::SetEventRequest const> SetEventRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tm_msgs::SetEventRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tm_msgs::SetEventRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tm_msgs::SetEventRequest_<ContainerAllocator1> & lhs, const ::tm_msgs::SetEventRequest_<ContainerAllocator2> & rhs)
{
  return lhs.func == rhs.func &&
    lhs.arg0 == rhs.arg0 &&
    lhs.arg1 == rhs.arg1;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tm_msgs::SetEventRequest_<ContainerAllocator1> & lhs, const ::tm_msgs::SetEventRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::SetEventRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::SetEventRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::SetEventRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::SetEventRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::SetEventRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::SetEventRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tm_msgs::SetEventRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b239077800357c9aa13c08a1a4a4dce9";
  }

  static const char* value(const ::tm_msgs::SetEventRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb239077800357c9aULL;
  static const uint64_t static_value2 = 0xa13c08a1a4a4dce9ULL;
};

template<class ContainerAllocator>
struct DataType< ::tm_msgs::SetEventRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tm_msgs/SetEventRequest";
  }

  static const char* value(const ::tm_msgs::SetEventRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tm_msgs::SetEventRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# More details please refer to the tm_ros_service.cpp/set_event function.\n"
"int8 TAG = 1\n"
"int8 WAIT_TAG = 2\n"
"int8 STOP = 11\n"
"int8 PAUSE = 12\n"
"int8 RESUME = 13\n"
"\n"
"int8 EXIT = -1\n"
"\n"
"int8 func\n"
"int8 arg0 # if fun is TAG or WAIT_TAG, arg0 is timeout in ms\n"
"int8 arg1 # if fun is TAG or WAIT_TAG, arg1 is id\n"
;
  }

  static const char* value(const ::tm_msgs::SetEventRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tm_msgs::SetEventRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.func);
      stream.next(m.arg0);
      stream.next(m.arg1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetEventRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tm_msgs::SetEventRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tm_msgs::SetEventRequest_<ContainerAllocator>& v)
  {
    s << indent << "func: ";
    Printer<int8_t>::stream(s, indent + "  ", v.func);
    s << indent << "arg0: ";
    Printer<int8_t>::stream(s, indent + "  ", v.arg0);
    s << indent << "arg1: ";
    Printer<int8_t>::stream(s, indent + "  ", v.arg1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TM_MSGS_MESSAGE_SETEVENTREQUEST_H
