// Generated by gencpp from file tm_msgs/SetIORequest.msg
// DO NOT EDIT!


#ifndef TM_MSGS_MESSAGE_SETIOREQUEST_H
#define TM_MSGS_MESSAGE_SETIOREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tm_msgs
{
template <class ContainerAllocator>
struct SetIORequest_
{
  typedef SetIORequest_<ContainerAllocator> Type;

  SetIORequest_()
    : module(0)
    , type(0)
    , pin(0)
    , state(0.0)  {
    }
  SetIORequest_(const ContainerAllocator& _alloc)
    : module(0)
    , type(0)
    , pin(0)
    , state(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _module_type;
  _module_type module;

   typedef int8_t _type_type;
  _type_type type;

   typedef int8_t _pin_type;
  _pin_type pin;

   typedef float _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MODULE_CONTROLBOX)
  #undef MODULE_CONTROLBOX
#endif
#if defined(_WIN32) && defined(MODULE_ENDEFFECTOR)
  #undef MODULE_ENDEFFECTOR
#endif
#if defined(_WIN32) && defined(TYPE_DIGITAL_IN)
  #undef TYPE_DIGITAL_IN
#endif
#if defined(_WIN32) && defined(TYPE_DIGITAL_OUT)
  #undef TYPE_DIGITAL_OUT
#endif
#if defined(_WIN32) && defined(TYPE_INSTANT_DO)
  #undef TYPE_INSTANT_DO
#endif
#if defined(_WIN32) && defined(TYPE_ANALOG_IN)
  #undef TYPE_ANALOG_IN
#endif
#if defined(_WIN32) && defined(TYPE_ANALOG_OUT)
  #undef TYPE_ANALOG_OUT
#endif
#if defined(_WIN32) && defined(TYPE_INSTANT_AO)
  #undef TYPE_INSTANT_AO
#endif
#if defined(_WIN32) && defined(STATE_OFF)
  #undef STATE_OFF
#endif
#if defined(_WIN32) && defined(STATE_ON)
  #undef STATE_ON
#endif

  enum {
    MODULE_CONTROLBOX = 0,
    MODULE_ENDEFFECTOR = 1,
    TYPE_DIGITAL_IN = 0,
    TYPE_DIGITAL_OUT = 1,
    TYPE_INSTANT_DO = 2,
    TYPE_ANALOG_IN = 3,
    TYPE_ANALOG_OUT = 4,
    TYPE_INSTANT_AO = 5,
    STATE_OFF = 0,
    STATE_ON = 1,
  };


  typedef boost::shared_ptr< ::tm_msgs::SetIORequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tm_msgs::SetIORequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetIORequest_

typedef ::tm_msgs::SetIORequest_<std::allocator<void> > SetIORequest;

typedef boost::shared_ptr< ::tm_msgs::SetIORequest > SetIORequestPtr;
typedef boost::shared_ptr< ::tm_msgs::SetIORequest const> SetIORequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tm_msgs::SetIORequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tm_msgs::SetIORequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tm_msgs::SetIORequest_<ContainerAllocator1> & lhs, const ::tm_msgs::SetIORequest_<ContainerAllocator2> & rhs)
{
  return lhs.module == rhs.module &&
    lhs.type == rhs.type &&
    lhs.pin == rhs.pin &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tm_msgs::SetIORequest_<ContainerAllocator1> & lhs, const ::tm_msgs::SetIORequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::SetIORequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::SetIORequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::SetIORequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::SetIORequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::SetIORequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::SetIORequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tm_msgs::SetIORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f68a6af36df29cd75eb72b95a963915a";
  }

  static const char* value(const ::tm_msgs::SetIORequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf68a6af36df29cd7ULL;
  static const uint64_t static_value2 = 0x5eb72b95a963915aULL;
};

template<class ContainerAllocator>
struct DataType< ::tm_msgs::SetIORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tm_msgs/SetIORequest";
  }

  static const char* value(const ::tm_msgs::SetIORequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tm_msgs::SetIORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# More details please refer to the TM_Robot_Expression.pdf(1.76 rev1.00) Chapter 6.5 IO\n"
"int8 MODULE_CONTROLBOX = 0\n"
"int8 MODULE_ENDEFFECTOR = 1\n"
"\n"
"int8 TYPE_DIGITAL_IN = 0\n"
"int8 TYPE_DIGITAL_OUT = 1\n"
"int8 TYPE_INSTANT_DO = 2\n"
"int8 TYPE_ANALOG_IN = 3\n"
"int8 TYPE_ANALOG_OUT = 4\n"
"int8 TYPE_INSTANT_AO = 5\n"
"\n"
"int8 STATE_OFF = 0\n"
"int8 STATE_ON = 1\n"
"\n"
"# request fields\n"
"int8 module\n"
"int8 type\n"
"int8 pin\n"
"float32 state #STATE_OFF or STATE_ON value, or other value (if type expressed in a specific control module)\n"
;
  }

  static const char* value(const ::tm_msgs::SetIORequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tm_msgs::SetIORequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.module);
      stream.next(m.type);
      stream.next(m.pin);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetIORequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tm_msgs::SetIORequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tm_msgs::SetIORequest_<ContainerAllocator>& v)
  {
    s << indent << "module: ";
    Printer<int8_t>::stream(s, indent + "  ", v.module);
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
    s << indent << "pin: ";
    Printer<int8_t>::stream(s, indent + "  ", v.pin);
    s << indent << "state: ";
    Printer<float>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TM_MSGS_MESSAGE_SETIOREQUEST_H
