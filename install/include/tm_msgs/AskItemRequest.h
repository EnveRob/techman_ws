// Generated by gencpp from file tm_msgs/AskItemRequest.msg
// DO NOT EDIT!


#ifndef TM_MSGS_MESSAGE_ASKITEMREQUEST_H
#define TM_MSGS_MESSAGE_ASKITEMREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tm_msgs
{
template <class ContainerAllocator>
struct AskItemRequest_
{
  typedef AskItemRequest_<ContainerAllocator> Type;

  AskItemRequest_()
    : id()
    , item()
    , wait_time(0.0)  {
    }
  AskItemRequest_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , item(_alloc)
    , wait_time(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _item_type;
  _item_type item;

   typedef double _wait_time_type;
  _wait_time_type wait_time;





  typedef boost::shared_ptr< ::tm_msgs::AskItemRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tm_msgs::AskItemRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AskItemRequest_

typedef ::tm_msgs::AskItemRequest_<std::allocator<void> > AskItemRequest;

typedef boost::shared_ptr< ::tm_msgs::AskItemRequest > AskItemRequestPtr;
typedef boost::shared_ptr< ::tm_msgs::AskItemRequest const> AskItemRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tm_msgs::AskItemRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tm_msgs::AskItemRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tm_msgs::AskItemRequest_<ContainerAllocator1> & lhs, const ::tm_msgs::AskItemRequest_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.item == rhs.item &&
    lhs.wait_time == rhs.wait_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tm_msgs::AskItemRequest_<ContainerAllocator1> & lhs, const ::tm_msgs::AskItemRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::AskItemRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::AskItemRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::AskItemRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::AskItemRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::AskItemRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::AskItemRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tm_msgs::AskItemRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "119d57306382144e550df77a72a81fce";
  }

  static const char* value(const ::tm_msgs::AskItemRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x119d57306382144eULL;
  static const uint64_t static_value2 = 0x550df77a72a81fceULL;
};

template<class ContainerAllocator>
struct DataType< ::tm_msgs::AskItemRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tm_msgs/AskItemRequest";
  }

  static const char* value(const ::tm_msgs::AskItemRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tm_msgs::AskItemRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Ask: request 'Read'\n"
"# id        : The discribtion you want to name. \n"
"# item      : More details please refer to the TM_Robot_Expression.pdf(1.76 rev1.00) Chapter 7.4 TMSCT\n"
"# wait_time : set wait time.\n"
"# More details please refer to the TM_Robot_Expression.pdf(version 1.76_6300) Chapter 7.4 TMSCT\n"
"\n"
"string id\n"
"string item\n"
"\n"
"float64 wait_time\n"
"\n"
;
  }

  static const char* value(const ::tm_msgs::AskItemRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tm_msgs::AskItemRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.item);
      stream.next(m.wait_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AskItemRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tm_msgs::AskItemRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tm_msgs::AskItemRequest_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "item: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.item);
    s << indent << "wait_time: ";
    Printer<double>::stream(s, indent + "  ", v.wait_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TM_MSGS_MESSAGE_ASKITEMREQUEST_H
