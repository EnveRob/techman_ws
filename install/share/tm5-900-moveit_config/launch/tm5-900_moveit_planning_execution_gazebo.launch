<?xml version="1.0"?>
<launch>
  <!-- The planning and execution components of MoveIt! Configured to run against Gazebo-based, 
       This can be achieved by executing the the following commands:

       1.Launch the gazebo simulator and spawn the robot model into gazebo and load the ros_control controllers:         
           roslaunch tm_gazebo <tm_robot_type>_gazebo.launch
           
       2.Launch moveit! and ensure that it is configured to run alongside Gazebo with simulated TM robot: (The 'sim:= true' can be omitted as default)
           roslaunch <tm_robot_type>-moveit_config <tm_robot_type>_moveit_planning_execution_gazebo.launch sim:=true
           
         or  with real TM Robot: (The Project_Speed should be set to 100% before you start running this Listen task project)
           roslaunch <tm_robot_type>-moveit_config <tm_robot_type>_moveit_planning_execution_gazebo.launch sim:=False robot_ip:=<robot_ip_address>
     
       The prefix `<tm_robot_type>` is tm5-900 .
       The parameter `<robot_ip_address>` means the IP address of the real TM Robot .    
  -->

  <!-- The planning and execution components of MoveIt! configured to run -->
  <!-- using the ROS-Industrial interface. -->
  <rosparam command="load" file="$(find tm5-900-moveit_config)/config/joint_names.yaml"/>
 
  <!-- specify the planning pipeline -->
  <arg name="pipeline" default="ompl" />

  <!-- By default, we do not start a database (it can be large) -->
  <!-- <arg name="db" default="false" /> -->
  <!-- Allow user to specify database location -->
  <!-- <arg name="db_path" default="$(find tm5-900-moveit_config)/default_warehouse_mongo_db" /> -->

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />
  <arg name="use_gui" default="true" />
 
  <!-- the "sim" argument controls whether we connect to a Simulated or Real robot -->
  <!--  - if sim = false, a robot_ip argument is required -->
  <arg name="sim" default="true" />
  <arg name="robot_ip" unless="$(arg sim)" />
 
  <!-- load the robot_description parameter before launching ROS-I nodes -->
  <!-- don't Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find tm5-900-moveit_config)/launch/planning_context.launch" >
    <arg name="load_robot_description" if="$(arg sim)" value="false"/>
    <arg name="load_robot_description" unless="$(arg sim)" value="true"/>    
  </include>

  <!-- The semantic description that corresponds to the URDF -->
  <param name="robot_description_semantic" textfile="$(find tm5-900-moveit_config)/config/tm5-900.srdf" />

  <!-- Load updated joint limits (override information from URDF) -->
  <group ns="robot_description_planning">
    <rosparam command="load" file="$(find tm5-900-moveit_config)/config/joint_limits.yaml"/>
  </group>

  <!-- Load default settings for kinematics; these settings are overridden by settings in a node's namespace -->
  <!--  
  <group ns="robot_description_kinematics">
    <rosparam command="load" file="$(find tm5-900-moveit_config)/config/kinematics.yaml"/>
  </group>
  -->

  <!-- Remap follow_joint_trajectory -->
  <remap from="/follow_joint_trajectory" to="/arm_controller/follow_joint_trajectory"/>  

  <!-- run the robot simulator and action interface nodes -->
  <group if="$(arg sim)">
    <include file="$(find industrial_robot_simulator)/launch/robot_interface_simulator.launch" />
  </group>

  <!-- if no real robot connected, so publish fake joint states -->
  <group if="$(arg sim)">
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <param name="use_gui" value="$(arg use_gui)"/>
      <rosparam param="source_list">[/joint_states]</rosparam>
      <!-- <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam> -->
    </node>
  </group>

  <!-- run the "real robot" interface nodes -->
  <!--   - this typically includes: robot_state, motion_interface, and joint_trajectory_action nodes -->
  <!--   - replace these calls with appropriate robot-specific calls or launch files -->
  <group unless="$(arg sim)">
    <include file="$(find tm_driver)/launch/tm5-900-moveit_bringup.launch" >
      <arg name="robot_ip" value="$(arg robot_ip)"/>
    </include>
  </group>

  <!-- publish the robot state (tf transforms) -->
  <group if="$(arg sim)">
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  </group>

  <!-- Run the main MoveIt! executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find tm5-900-moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="publish_monitored_planning_scene" value="true"/>
    <arg name="fake_execution" value="false"/>
    <arg name="info" value="$(arg debug)"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="pipeline" value="$(arg pipeline)"/>
    <arg name="load_robot_description" value="false"/>
  </include>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include file="$(find tm5-900-moveit_config)/launch/moveit_rviz.launch">
    <arg name="rviz_config" value="$(find tm_gazebo)/rviz/moveit.rviz"/> 
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- If database loading was enabled, start mongodb as well -->
  <!-- <include file="$(find tm5-900-moveit_config)/launch/default_warehouse_db.launch" if="$(arg db)"> -->
  <!--  <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/> -->
  <!-- </include> -->

</launch>
